/*
   package.json config
   npm install
   grunt
 */

module.exports = function(grunt) {

  var fs = require('fs');
  // Project configuration.
  var banner = '// auto generated by concat \n;define(\'${path}\', function(require, exports, module) {\n\n',
      footer = '\n})',
      separator = footer + '\n\n' + banner;
  var plugins = [];

  grunt.initConfig({
    pkg: grunt.file.readJSON('package.json'),

    watch: {
        files: ['ckstyle/**/*.js'],
        tasks: ['copy']
    },
    copy: {
      main: {
        src: 'ckstyle/**/*.js',
        dest: 'dist/',
        flatten: true,
        options: {
          processContent: function(src, filepath) {
            // index.js 会出现在所有plugins之后
            if (filepath == 'ckstyle/plugins/index.js') {
              var src = '';
              plugins.forEach(function(p) {
                p = p.replace(/\.js$/, '');
                src += 'exports.' + p + ' = require(\'./' + p + '\'); \n';
              });
            }
            var splited = filepath.split('/');
            if (splited.length > 2) {
              var plugin = splited[splited.length - 1];
              if (plugin.indexOf('FED') == 0) {
                plugins.push(plugin);
              }
            }
            var code = '';
            var code = code + banner.replace('${path}', filepath.replace(/\.js$/, ''));

            code = code + src.trim() + '\n' + footer;
            return code;
          }
        }
      },
    },
    concat: {  
      options: {  
        // banner: banner,
        // footer: footer,
        // separator: separator,
        process: function(src, filepath) {
          var code = '';
          if (shouldAdd) {
            code = '\n\n' + code;
          }
          shouldAdd = true;
          var code = code + banner.replace('${path}', filepath);

          code = code + src + '\n' + footer;
          return code;
        }
      },  
      dist: {  
        src: ['ckstyle/**/*.js'],
        dest: 'dist/<%= pkg.name %>.js'  
      }  
    },
  });

  // Load the plugin that provides the "uglify" task.
  grunt.loadNpmTasks('grunt-contrib-copy');
  grunt.loadNpmTasks('grunt-contrib-watch');
  grunt.loadNpmTasks('grunt-contrib-concat');

  grunt.registerTask('default', ['copy']);
};